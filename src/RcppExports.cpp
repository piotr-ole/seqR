// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// count_contiguous_kmers_string_vector
Rcpp::List count_contiguous_kmers_string_vector(Rcpp::StringVector& sq, Rcpp::StringVector& kmerAlphabet, Rcpp::Environment& rcppParams);
RcppExport SEXP _seqR_count_contiguous_kmers_string_vector(SEXP sqSEXP, SEXP kmerAlphabetSEXP, SEXP rcppParamsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::StringVector& >::type sq(sqSEXP);
    Rcpp::traits::input_parameter< Rcpp::StringVector& >::type kmerAlphabet(kmerAlphabetSEXP);
    Rcpp::traits::input_parameter< Rcpp::Environment& >::type rcppParams(rcppParamsSEXP);
    rcpp_result_gen = Rcpp::wrap(count_contiguous_kmers_string_vector(sq, kmerAlphabet, rcppParams));
    return rcpp_result_gen;
END_RCPP
}
// count_contiguous_kmers_string_list
Rcpp::List count_contiguous_kmers_string_list(Rcpp::List& sq, Rcpp::StringVector& kmerAlphabet, Rcpp::Environment& rcppParams);
RcppExport SEXP _seqR_count_contiguous_kmers_string_list(SEXP sqSEXP, SEXP kmerAlphabetSEXP, SEXP rcppParamsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List& >::type sq(sqSEXP);
    Rcpp::traits::input_parameter< Rcpp::StringVector& >::type kmerAlphabet(kmerAlphabetSEXP);
    Rcpp::traits::input_parameter< Rcpp::Environment& >::type rcppParams(rcppParamsSEXP);
    rcpp_result_gen = Rcpp::wrap(count_contiguous_kmers_string_list(sq, kmerAlphabet, rcppParams));
    return rcpp_result_gen;
END_RCPP
}
// count_gapped_kmers_string_vector
Rcpp::List count_gapped_kmers_string_vector(Rcpp::StringVector& sq, Rcpp::StringVector& kmerAlphabet, Rcpp::Environment& rcppParams);
RcppExport SEXP _seqR_count_gapped_kmers_string_vector(SEXP sqSEXP, SEXP kmerAlphabetSEXP, SEXP rcppParamsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::StringVector& >::type sq(sqSEXP);
    Rcpp::traits::input_parameter< Rcpp::StringVector& >::type kmerAlphabet(kmerAlphabetSEXP);
    Rcpp::traits::input_parameter< Rcpp::Environment& >::type rcppParams(rcppParamsSEXP);
    rcpp_result_gen = Rcpp::wrap(count_gapped_kmers_string_vector(sq, kmerAlphabet, rcppParams));
    return rcpp_result_gen;
END_RCPP
}
// count_gapped_kmers_string_list
Rcpp::List count_gapped_kmers_string_list(Rcpp::List& sq, Rcpp::StringVector& kmerAlphabet, Rcpp::Environment& rcppParams);
RcppExport SEXP _seqR_count_gapped_kmers_string_list(SEXP sqSEXP, SEXP kmerAlphabetSEXP, SEXP rcppParamsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List& >::type sq(sqSEXP);
    Rcpp::traits::input_parameter< Rcpp::StringVector& >::type kmerAlphabet(kmerAlphabetSEXP);
    Rcpp::traits::input_parameter< Rcpp::Environment& >::type rcppParams(rcppParamsSEXP);
    rcpp_result_gen = Rcpp::wrap(count_gapped_kmers_string_list(sq, kmerAlphabet, rcppParams));
    return rcpp_result_gen;
END_RCPP
}
// merge_kmer_results
Rcpp::List merge_kmer_results(Rcpp::List resList);
RcppExport SEXP _seqR_merge_kmer_results(SEXP resListSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type resList(resListSEXP);
    rcpp_result_gen = Rcpp::wrap(merge_kmer_results(resList));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_seqR_count_contiguous_kmers_string_vector", (DL_FUNC) &_seqR_count_contiguous_kmers_string_vector, 3},
    {"_seqR_count_contiguous_kmers_string_list", (DL_FUNC) &_seqR_count_contiguous_kmers_string_list, 3},
    {"_seqR_count_gapped_kmers_string_vector", (DL_FUNC) &_seqR_count_gapped_kmers_string_vector, 3},
    {"_seqR_count_gapped_kmers_string_list", (DL_FUNC) &_seqR_count_gapped_kmers_string_list, 3},
    {"_seqR_merge_kmer_results", (DL_FUNC) &_seqR_merge_kmer_results, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_seqR(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
