// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// enumerate_string_sequence
Rcpp::IntegerVector enumerate_string_sequence(Rcpp::Nullable<Rcpp::StringVector> sequence, Rcpp::Nullable<Rcpp::StringVector> alphabet);
RcppExport SEXP _seqR_enumerate_string_sequence(SEXP sequenceSEXP, SEXP alphabetSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::StringVector> >::type sequence(sequenceSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::StringVector> >::type alphabet(alphabetSEXP);
    rcpp_result_gen = Rcpp::wrap(enumerate_string_sequence(sequence, alphabet));
    return rcpp_result_gen;
END_RCPP
}
// enumerate_integer_sequence
Rcpp::IntegerVector enumerate_integer_sequence(Rcpp::Nullable<Rcpp::IntegerVector> sequence, Rcpp::Nullable<Rcpp::IntegerVector> alphabet);
RcppExport SEXP _seqR_enumerate_integer_sequence(SEXP sequenceSEXP, SEXP alphabetSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::IntegerVector> >::type sequence(sequenceSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::IntegerVector> >::type alphabet(alphabetSEXP);
    rcpp_result_gen = Rcpp::wrap(enumerate_integer_sequence(sequence, alphabet));
    return rcpp_result_gen;
END_RCPP
}
// enumerate_numeric_sequence
Rcpp::IntegerVector enumerate_numeric_sequence(Rcpp::Nullable<Rcpp::NumericVector> sequence, Rcpp::Nullable<Rcpp::NumericVector> alphabet);
RcppExport SEXP _seqR_enumerate_numeric_sequence(SEXP sequenceSEXP, SEXP alphabetSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::NumericVector> >::type sequence(sequenceSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::NumericVector> >::type alphabet(alphabetSEXP);
    rcpp_result_gen = Rcpp::wrap(enumerate_numeric_sequence(sequence, alphabet));
    return rcpp_result_gen;
END_RCPP
}
// get_not_allowed_sequence_positions
Rcpp::IntegerVector get_not_allowed_sequence_positions(Rcpp::IntegerVector encoded_sequence);
RcppExport SEXP _seqR_get_not_allowed_sequence_positions(SEXP encoded_sequenceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type encoded_sequence(encoded_sequenceSEXP);
    rcpp_result_gen = Rcpp::wrap(get_not_allowed_sequence_positions(encoded_sequence));
    return rcpp_result_gen;
END_RCPP
}
// count_kmers_hashed
Rcpp::DataFrame count_kmers_hashed(Rcpp::IntegerVector encoded_sequence, int k, bool positional_kmer, int P, int P_K_1, int M);
RcppExport SEXP _seqR_count_kmers_hashed(SEXP encoded_sequenceSEXP, SEXP kSEXP, SEXP positional_kmerSEXP, SEXP PSEXP, SEXP P_K_1SEXP, SEXP MSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type encoded_sequence(encoded_sequenceSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< bool >::type positional_kmer(positional_kmerSEXP);
    Rcpp::traits::input_parameter< int >::type P(PSEXP);
    Rcpp::traits::input_parameter< int >::type P_K_1(P_K_1SEXP);
    Rcpp::traits::input_parameter< int >::type M(MSEXP);
    rcpp_result_gen = Rcpp::wrap(count_kmers_hashed(encoded_sequence, k, positional_kmer, P, P_K_1, M));
    return rcpp_result_gen;
END_RCPP
}
// decode_kmer
Rcpp::StringVector decode_kmer(Rcpp::IntegerVector encoded_sequence, Rcpp::IntegerVector d, int begin_position, Rcpp::DataFrame df_code2str, bool positional_kmer);
RcppExport SEXP _seqR_decode_kmer(SEXP encoded_sequenceSEXP, SEXP dSEXP, SEXP begin_positionSEXP, SEXP df_code2strSEXP, SEXP positional_kmerSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type encoded_sequence(encoded_sequenceSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type d(dSEXP);
    Rcpp::traits::input_parameter< int >::type begin_position(begin_positionSEXP);
    Rcpp::traits::input_parameter< Rcpp::DataFrame >::type df_code2str(df_code2strSEXP);
    Rcpp::traits::input_parameter< bool >::type positional_kmer(positional_kmerSEXP);
    rcpp_result_gen = Rcpp::wrap(decode_kmer(encoded_sequence, d, begin_position, df_code2str, positional_kmer));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_seqR_enumerate_string_sequence", (DL_FUNC) &_seqR_enumerate_string_sequence, 2},
    {"_seqR_enumerate_integer_sequence", (DL_FUNC) &_seqR_enumerate_integer_sequence, 2},
    {"_seqR_enumerate_numeric_sequence", (DL_FUNC) &_seqR_enumerate_numeric_sequence, 2},
    {"_seqR_get_not_allowed_sequence_positions", (DL_FUNC) &_seqR_get_not_allowed_sequence_positions, 1},
    {"_seqR_count_kmers_hashed", (DL_FUNC) &_seqR_count_kmers_hashed, 6},
    {"_seqR_decode_kmer", (DL_FUNC) &_seqR_decode_kmer, 5},
    {NULL, NULL, 0}
};

RcppExport void R_init_seqR(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
